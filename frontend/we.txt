See i want that if its a new user that is not in my db yet, then it should be shown a registration formto filln that info should get filled in my db too
for that u need to modify my navbar.jsx , make a new component register.jsx and at backend side - server.js n model(user.js) will be modified

import { useState, useEffect } from 'react';
import { useAuth0 } from '@auth0/auth0-react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './style.css';

function Navbar() {
  const { user, isAuthenticated, loginWithRedirect, logout } = useAuth0();
  const [loggedInUser, setLoggedInUser] = useState(null);
  const [showPopup, setShowPopup] = useState(false);
  const navigate = useNavigate();

  // Check localStorage for logged-in user on page load
  useEffect(() => {
    const storedUser = localStorage.getItem('loggedInUser');
    if (storedUser) {
      setLoggedInUser(JSON.parse(storedUser));
    }
  }, []);

  // Store logged-in user in localStorage and database
  useEffect(() => {
    if (isAuthenticated && user) {
      const checkUser = async () => {
        try {
          const response = await axios.get(`/api/users/${user.email}`);
          if (response.data) {
            setLoggedInUser(response.data);
            localStorage.setItem('loggedInUser', JSON.stringify(response.data));
          } else {
            navigate('/register');
          }
        } catch (error) {
          console.error('Error checking user:', error);
        }
      };
      checkUser();
    }
  }, [isAuthenticated, user, navigate]);

  // Logout handler
  const handleLogout = () => {
    localStorage.removeItem('loggedInUser'); // Remove user from localStorage
    setLoggedInUser(null); // Reset state
    logout({ returnTo: window.location.origin }); // Auth0 logout
  };

  return (
    <nav className="bg-black p-4 fixed top-0 left-0 w-full z-50 shadow-lg shadow-gray-800">
      <div className="container mx-auto flex justify-between items-center">
        <div className="flex items-center gap-4">
          <div className="text-white text-xl font-bold">GuideX</div>
          <div className="flex gap-4">
            <Link to="/" className="text-white hover:text-blue-500">Home</Link>
            <Link to="/connect" className="text-white hover:text-blue-500">Connect</Link>
          </div>
        </div>
        <div className="flex items-center gap-4">
          {loggedInUser ? (
            <div
              className="relative flex items-center"
              onMouseEnter={() => setShowPopup(true)}
              onMouseLeave={() => setShowPopup(false)}
            >
              <img
                src={loggedInUser.picture}
                alt="User"
                className="w-10 h-10 rounded-full border-2 border-blue-500 cursor-pointer"
              />
              {showPopup && (
                <div className="absolute top-12 right-0 bg-gray-800 text-white p-2 rounded shadow-lg">
                  <p>{loggedInUser.name}</p>
                  <p>{loggedInUser.email}</p>
                </div>
              )}
              <button onClick={handleLogout} className="bg-transparent border-2 border-blue-500 text-white px-4 py-2 rounded ml-4 hover:bg-blue-500 hover:text-black transition duration-300">
                Logout
              </button>
            </div>
          ) : (
            <button onClick={() => loginWithRedirect()} className="bg-transparent border-2 border-blue-500 text-white px-4 py-2 rounded hover:bg-blue-500 hover:text-black transition duration-300">
              Login
            </button>
          )}
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

import React, { useState } from 'react';
import axios from 'axios';
import { useAuth0 } from '@auth0/auth0-react';
import { useNavigate } from 'react-router-dom';

const Register = () => {
  const { user } = useAuth0();
  const [formData, setFormData] = useState({
    name: user.name,
    email: user.email,
    picture: user.picture,
    phoneNumber: '',
    areasOfExpertise: '',
    areasOfInterest: '',
    availability: '',
    experienceLevel: '',
    bio: '',
    location: '',
    linkedInProfile: '',

    gender: '',
    age: '',
  });
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
    setFormData({ ...formData, resume: e.target.files[0] });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formDataToSend = new FormData();
    for (const key in formData) {
      formDataToSend.append(key, formData[key]);
    }
    try {
      await axios.post('/api/users', formDataToSend, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      navigate('/connect');
    } catch (error) {
      console.error('Error registering user:', error);
    }
  };

  return (
    <div className="container mx-auto mt-16">
      <h1 className="text-4xl font-bold text-center mb-8">Register</h1>
      <form onSubmit={handleSubmit} className="max-w-md mx-auto bg-white p-8 rounded shadow-md">
        <div className="mb-4">
          <label className="block text-gray-700">Full Name</label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Email Address</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
            disabled
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Phone Number</label>
          <input
            type="text"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Areas of Expertise</label>
          <select
            name="areasOfExpertise"
            value={formData.areasOfExpertise}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          >
            <option value="">Select</option>
            <option value="frontend">Frontend</option>
            <option value="backend">Backend</option>
            <option value="fullstack">Fullstack</option>
            <option value="mern">MERN</option>
            <option value="mean">MEAN</option>
            <option value="blockchain">Blockchain</option>
            <option value="alml">AI/ML</option>
            <option value="cybersecurity">Cyber Security</option>
          </select>
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Areas of Interest</label>
          <input
            type="text"
            name="areasOfInterest"
            value={formData.areasOfInterest}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Availability (Days/Time)</label>
          <input
            type="text"
            name="availability"
            value={formData.availability}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Experience Level</label>
          <input
            type="text"
            name="experienceLevel"
            value={formData.experienceLevel}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Bio</label>
          <textarea
            name="bio"
            value={formData.bio}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Location (City/Region)</label>
          <input
            type="text"
            name="location"
            value={formData.location}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">LinkedIn Profile URL</label>
          <input
            type="url"
            name="linkedInProfile"
            value={formData.linkedInProfile}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Gender</label>
          <input
            type="text"
            name="gender"
            value={formData.gender}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700">Age</label>
          <input
            type="number"
            name="age"
            value={formData.age}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded">
          Register
        </button>
      </form>
    </div>
  );
};

export default Register;

const express = require('express');
const path = require('path');
const db = require('./db');
const User = require('./models/user');

const app = express();
app.use(express.json());

// Serve static files from the React app
app.use(express.static(path.join(__dirname, '../frontend')));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../frontend', 'index.html'));
});

// Register new user
app.post('/api/users', async (req, res) => {
  const { name, email, bio, niche, coins, tier } = req.body;
  try {
    const newUser = new User({ name, email, bio, niche, coins, tier });
    await newUser.save();
    res.json(newUser);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get user data
app.get('/api/users/:email', async (req, res) => {
  const { email } = req.params;
  try {
    const user = await User.findOne({ email });
    if (user) {
      res.json(user);
    } else {
      res.status(404).json({ error: 'User not found' });
    }
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Register new user
app.post('/api/users', upload.single('resume'), async (req, res) => {
  const { name, email, picture, phoneNumber, areasOfExpertise, areasOfInterest, availability, experienceLevel, bio, location, linkedInProfile, gender, age } = req.body;
  const resume = req.file ? req.file.path : null;
  try {
    const newUser = new User({ name, email, picture, phoneNumber, areasOfExpertise, areasOfInterest, availability, experienceLevel, bio, location, linkedInProfile, resume, gender, age, coins: 100, tier: 'Copper' });
    await newUser.save();
    res.json(newUser);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});
  
  // Update user data
  app.put('/api/users/:email', async (req, res) => {
    const { email } = req.params;
    const { name, role, tier, bio } = req.body;
    try {
      const user = await User.findOneAndUpdate(
        { email },
        { name, role, tier, bio },
        { new: true }
      );
      res.json(user);
    } catch (error) {
      res.status(500).json({ error: 'Internal server error' });
    }
  });

  // Send coins
app.post('/api/send-coins', async (req, res) => {
  const { senderEmail, recipientEmail, amount } = req.body;
  try {
    const sender = await User.findOne({ email: senderEmail });
    const recipient = await User.findOne({ email: recipientEmail });

    if (!sender || !recipient) {
      return res.status(404).json({ error: 'User not found' });
    }

    if (sender.coins < amount) {
      return res.status(400).json({ error: 'Insufficient coins' });
    }

    sender.coins -= amount;
    recipient.coins += amount;

    await sender.save();
    await recipient.save();

    res.json({ sender, recipient });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  picture: { type: String, required: true },
});

const User = mongoose.model('User', userSchema);

module.exports = User;

